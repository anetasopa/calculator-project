{"ast":null,"code":"import isArray from '../utils/is-array';\nimport isUndefined from '../utils/is-undefined';\nimport { deprecateSimple } from '../utils/deprecate';\nimport { mergeConfigs } from './set';\nimport { Locale } from './constructor';\nimport keys from '../utils/keys';\nimport { baseConfig } from './base-config'; // internal storage for locale config files\n\nvar locales = {},\n    localeFamilies = {},\n    globalLocale;\n\nfunction commonPrefix(arr1, arr2) {\n  var i,\n      minl = Math.min(arr1.length, arr2.length);\n\n  for (i = 0; i < minl; i += 1) {\n    if (arr1[i] !== arr2[i]) {\n      return i;\n    }\n  }\n\n  return minl;\n}\n\nfunction normalizeLocale(key) {\n  return key ? key.toLowerCase().replace('_', '-') : key;\n} // pick the locale from the array\n// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n\n\nfunction chooseLocale(names) {\n  var i = 0,\n      j,\n      next,\n      locale,\n      split;\n\n  while (i < names.length) {\n    split = normalizeLocale(names[i]).split('-');\n    j = split.length;\n    next = normalizeLocale(names[i + 1]);\n    next = next ? next.split('-') : null;\n\n    while (j > 0) {\n      locale = loadLocale(split.slice(0, j).join('-'));\n\n      if (locale) {\n        return locale;\n      }\n\n      if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {\n        //the next array item is better than a shallower substring of this one\n        break;\n      }\n\n      j--;\n    }\n\n    i++;\n  }\n\n  return globalLocale;\n}\n\nfunction loadLocale(name) {\n  var oldLocale = null,\n      aliasedRequire; // TODO: Find a better way to register and load all the locales in Node\n\n  if (locales[name] === undefined && typeof module !== 'undefined' && module && module.exports) {\n    try {\n      oldLocale = globalLocale._abbr;\n      aliasedRequire = require;\n      aliasedRequire((typeof __dirname !== undefined ? __dirname : '.') + '/locale/' + name);\n      getSetGlobalLocale(oldLocale);\n    } catch (e) {\n      // mark as not found to avoid repeating expensive file require call causing high CPU\n      // when trying to find en-US, en_US, en-us for every format call\n      locales[name] = null; // null means not found\n    }\n  }\n\n  return locales[name];\n} // This function will load locale and then set the global locale.  If\n// no arguments are passed in, it will simply return the current global\n// locale key.\n\n\nexport function getSetGlobalLocale(key, values) {\n  var data;\n\n  if (key) {\n    if (isUndefined(values)) {\n      data = getLocale(key);\n    } else {\n      data = defineLocale(key, values);\n    }\n\n    if (data) {\n      // moment.duration._locale = moment._locale = data;\n      globalLocale = data;\n    } else {\n      if (typeof console !== 'undefined' && console.warn) {\n        //warn user if arguments are passed but the locale could not be set\n        console.warn('Locale ' + key + ' not found. Did you forget to load it?');\n      }\n    }\n  }\n\n  return globalLocale._abbr;\n}\nexport function defineLocale(name, config) {\n  if (config !== null) {\n    var locale,\n        parentConfig = baseConfig;\n    config.abbr = name;\n\n    if (locales[name] != null) {\n      deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');\n      parentConfig = locales[name]._config;\n    } else if (config.parentLocale != null) {\n      if (locales[config.parentLocale] != null) {\n        parentConfig = locales[config.parentLocale]._config;\n      } else {\n        locale = loadLocale(config.parentLocale);\n\n        if (locale != null) {\n          parentConfig = locale._config;\n        } else {\n          if (!localeFamilies[config.parentLocale]) {\n            localeFamilies[config.parentLocale] = [];\n          }\n\n          localeFamilies[config.parentLocale].push({\n            name: name,\n            config: config\n          });\n          return null;\n        }\n      }\n    }\n\n    locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n    if (localeFamilies[name]) {\n      localeFamilies[name].forEach(function (x) {\n        defineLocale(x.name, x.config);\n      });\n    } // backwards compat for now: also set the locale\n    // make sure we set the locale AFTER all child locales have been\n    // created, so we won't end up with the child locale set.\n\n\n    getSetGlobalLocale(name);\n    return locales[name];\n  } else {\n    // useful for testing\n    delete locales[name];\n    return null;\n  }\n}\nexport function updateLocale(name, config) {\n  if (config != null) {\n    var locale,\n        tmpLocale,\n        parentConfig = baseConfig;\n\n    if (locales[name] != null && locales[name].parentLocale != null) {\n      // Update existing child locale in-place to avoid memory-leaks\n      locales[name].set(mergeConfigs(locales[name]._config, config));\n    } else {\n      // MERGE\n      tmpLocale = loadLocale(name);\n\n      if (tmpLocale != null) {\n        parentConfig = tmpLocale._config;\n      }\n\n      config = mergeConfigs(parentConfig, config);\n\n      if (tmpLocale == null) {\n        // updateLocale is called for creating a new locale\n        // Set abbr so it will have a name (getters return\n        // undefined otherwise).\n        config.abbr = name;\n      }\n\n      locale = new Locale(config);\n      locale.parentLocale = locales[name];\n      locales[name] = locale;\n    } // backwards compat for now: also set the locale\n\n\n    getSetGlobalLocale(name);\n  } else {\n    // pass null for config to unupdate, useful for tests\n    if (locales[name] != null) {\n      if (locales[name].parentLocale != null) {\n        locales[name] = locales[name].parentLocale;\n\n        if (name === getSetGlobalLocale()) {\n          getSetGlobalLocale(name);\n        }\n      } else if (locales[name] != null) {\n        delete locales[name];\n      }\n    }\n  }\n\n  return locales[name];\n} // returns locale data\n\nexport function getLocale(key) {\n  var locale;\n\n  if (key && key._locale && key._locale._abbr) {\n    key = key._locale._abbr;\n  }\n\n  if (!key) {\n    return globalLocale;\n  }\n\n  if (!isArray(key)) {\n    //short-circuit everything else\n    locale = loadLocale(key);\n\n    if (locale) {\n      return locale;\n    }\n\n    key = [key];\n  }\n\n  return chooseLocale(key);\n}\nexport function listLocales() {\n  return keys(locales);\n}","map":{"version":3,"sources":["/Users/sopa/react-calculator/node_modules/moment/src/lib/locale/locales.js"],"names":["isArray","isUndefined","deprecateSimple","mergeConfigs","Locale","keys","baseConfig","locales","localeFamilies","globalLocale","commonPrefix","arr1","arr2","i","minl","Math","min","length","normalizeLocale","key","toLowerCase","replace","chooseLocale","names","j","next","locale","split","loadLocale","slice","join","name","oldLocale","aliasedRequire","undefined","module","exports","_abbr","require","__dirname","getSetGlobalLocale","e","values","data","getLocale","defineLocale","console","warn","config","parentConfig","abbr","_config","parentLocale","push","forEach","x","updateLocale","tmpLocale","set","_locale","listLocales"],"mappings":"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","sourcesContent":["import isArray from '../utils/is-array';\nimport isUndefined from '../utils/is-undefined';\nimport { deprecateSimple } from '../utils/deprecate';\nimport { mergeConfigs } from './set';\nimport { Locale } from './constructor';\nimport keys from '../utils/keys';\n\nimport { baseConfig } from './base-config';\n\n// internal storage for locale config files\nvar locales = {},\n    localeFamilies = {},\n    globalLocale;\n\nfunction commonPrefix(arr1, arr2) {\n    var i,\n        minl = Math.min(arr1.length, arr2.length);\n    for (i = 0; i < minl; i += 1) {\n        if (arr1[i] !== arr2[i]) {\n            return i;\n        }\n    }\n    return minl;\n}\n\nfunction normalizeLocale(key) {\n    return key ? key.toLowerCase().replace('_', '-') : key;\n}\n\n// pick the locale from the array\n// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\nfunction chooseLocale(names) {\n    var i = 0,\n        j,\n        next,\n        locale,\n        split;\n\n    while (i < names.length) {\n        split = normalizeLocale(names[i]).split('-');\n        j = split.length;\n        next = normalizeLocale(names[i + 1]);\n        next = next ? next.split('-') : null;\n        while (j > 0) {\n            locale = loadLocale(split.slice(0, j).join('-'));\n            if (locale) {\n                return locale;\n            }\n            if (\n                next &&\n                next.length >= j &&\n                commonPrefix(split, next) >= j - 1\n            ) {\n                //the next array item is better than a shallower substring of this one\n                break;\n            }\n            j--;\n        }\n        i++;\n    }\n    return globalLocale;\n}\n\nfunction loadLocale(name) {\n    var oldLocale = null,\n        aliasedRequire;\n    // TODO: Find a better way to register and load all the locales in Node\n    if (\n        locales[name] === undefined &&\n        typeof module !== 'undefined' &&\n        module &&\n        module.exports\n    ) {\n        try {\n            oldLocale = globalLocale._abbr;\n            aliasedRequire = require;\n            aliasedRequire(\n                (typeof __dirname !== undefined ? __dirname : '.') +\n                    '/locale/' +\n                    name\n            );\n            getSetGlobalLocale(oldLocale);\n        } catch (e) {\n            // mark as not found to avoid repeating expensive file require call causing high CPU\n            // when trying to find en-US, en_US, en-us for every format call\n            locales[name] = null; // null means not found\n        }\n    }\n    return locales[name];\n}\n\n// This function will load locale and then set the global locale.  If\n// no arguments are passed in, it will simply return the current global\n// locale key.\nexport function getSetGlobalLocale(key, values) {\n    var data;\n    if (key) {\n        if (isUndefined(values)) {\n            data = getLocale(key);\n        } else {\n            data = defineLocale(key, values);\n        }\n\n        if (data) {\n            // moment.duration._locale = moment._locale = data;\n            globalLocale = data;\n        } else {\n            if (typeof console !== 'undefined' && console.warn) {\n                //warn user if arguments are passed but the locale could not be set\n                console.warn(\n                    'Locale ' + key + ' not found. Did you forget to load it?'\n                );\n            }\n        }\n    }\n\n    return globalLocale._abbr;\n}\n\nexport function defineLocale(name, config) {\n    if (config !== null) {\n        var locale,\n            parentConfig = baseConfig;\n        config.abbr = name;\n        if (locales[name] != null) {\n            deprecateSimple(\n                'defineLocaleOverride',\n                'use moment.updateLocale(localeName, config) to change ' +\n                    'an existing locale. moment.defineLocale(localeName, ' +\n                    'config) should only be used for creating a new locale ' +\n                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'\n            );\n            parentConfig = locales[name]._config;\n        } else if (config.parentLocale != null) {\n            if (locales[config.parentLocale] != null) {\n                parentConfig = locales[config.parentLocale]._config;\n            } else {\n                locale = loadLocale(config.parentLocale);\n                if (locale != null) {\n                    parentConfig = locale._config;\n                } else {\n                    if (!localeFamilies[config.parentLocale]) {\n                        localeFamilies[config.parentLocale] = [];\n                    }\n                    localeFamilies[config.parentLocale].push({\n                        name: name,\n                        config: config,\n                    });\n                    return null;\n                }\n            }\n        }\n        locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n        if (localeFamilies[name]) {\n            localeFamilies[name].forEach(function (x) {\n                defineLocale(x.name, x.config);\n            });\n        }\n\n        // backwards compat for now: also set the locale\n        // make sure we set the locale AFTER all child locales have been\n        // created, so we won't end up with the child locale set.\n        getSetGlobalLocale(name);\n\n        return locales[name];\n    } else {\n        // useful for testing\n        delete locales[name];\n        return null;\n    }\n}\n\nexport function updateLocale(name, config) {\n    if (config != null) {\n        var locale,\n            tmpLocale,\n            parentConfig = baseConfig;\n\n        if (locales[name] != null && locales[name].parentLocale != null) {\n            // Update existing child locale in-place to avoid memory-leaks\n            locales[name].set(mergeConfigs(locales[name]._config, config));\n        } else {\n            // MERGE\n            tmpLocale = loadLocale(name);\n            if (tmpLocale != null) {\n                parentConfig = tmpLocale._config;\n            }\n            config = mergeConfigs(parentConfig, config);\n            if (tmpLocale == null) {\n                // updateLocale is called for creating a new locale\n                // Set abbr so it will have a name (getters return\n                // undefined otherwise).\n                config.abbr = name;\n            }\n            locale = new Locale(config);\n            locale.parentLocale = locales[name];\n            locales[name] = locale;\n        }\n\n        // backwards compat for now: also set the locale\n        getSetGlobalLocale(name);\n    } else {\n        // pass null for config to unupdate, useful for tests\n        if (locales[name] != null) {\n            if (locales[name].parentLocale != null) {\n                locales[name] = locales[name].parentLocale;\n                if (name === getSetGlobalLocale()) {\n                    getSetGlobalLocale(name);\n                }\n            } else if (locales[name] != null) {\n                delete locales[name];\n            }\n        }\n    }\n    return locales[name];\n}\n\n// returns locale data\nexport function getLocale(key) {\n    var locale;\n\n    if (key && key._locale && key._locale._abbr) {\n        key = key._locale._abbr;\n    }\n\n    if (!key) {\n        return globalLocale;\n    }\n\n    if (!isArray(key)) {\n        //short-circuit everything else\n        locale = loadLocale(key);\n        if (locale) {\n            return locale;\n        }\n        key = [key];\n    }\n\n    return chooseLocale(key);\n}\n\nexport function listLocales() {\n    return keys(locales);\n}\n"]},"metadata":{},"sourceType":"module"}